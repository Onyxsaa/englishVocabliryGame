<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vocabulary Game level 1</title>
    <link rel="stylesheet" href="/stylesheets/style.css">

</head>
<body>



    <h1 id="main-title">Let's Pronounce Correctly</h1>
    
    <div id="username-container">
        <h2>Start the game!</h2>
        <label for="username-input">Username:</label>
        <input type="text" id="username-input" required>
        <button id="save-username-button">save and start</button>
    </div>

    <div id="timer-container" style="display: none;">
        Your Time: <span id="timer">60</span> seconds
    </div>

    <div id="game-container">
        <div id="user-info">
            Hello, <strong id="username-display"></strong>! | Score: <span id="score">0</span>
        </div>

        <div id="sentence-display">
            </div>
        <div class="action-buttons-container">
             <button id="speak-button" title="Dinle">üîä Listen</button>
        </div>
        <div id="choices-container">
            </div>
         <div class="action-buttons-container">
            <button id="next-button" title="Sonraki" disabled>Next</button>
         </div>
    </div>

    <div id="phase-transition-container">
        <h2>Level 1 completed!</h2>
        <p>Congratulations! Level 1 is completed.</p>
        <p>Total Score: <span id="phase-score">0</span></p>
        <p>level 1 time: <span id="phase1-completion-time">0</span> seconds</p>
        <div class="selections-history">
            <h3>level 1 selection history</h3>
            <ul id="phase1-history"></ul>
        </div>
        <button id="start-phase2-button">start level 2</button>
    </div>
    <!-- Skorboard b√∂l√ºm√º - Ana HTML'e ekleyin (game-over-container'dan √∂nce) -->
<div id="scoreboard-container" style="display: none;">
    <h2>Scoreboard - Best Players</h2>
    <table id="scoreboard-table">
        <thead>
            <tr>
                <th>Rank</th>
                <th>Username</th>
                <th>Score</th>
                <th>time (sc)</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody id="scoreboard-body">
            <!-- Skorlar JavaScript ile y√ºklenecek -->
        </tbody>
    </table>
    <button id="close-scoreboard-button">close</button>
</div>

<!-- Skorboard butonunu main menu'ye ekleyin (username-container i√ßine) -->
<button id="show-scoreboard-button" style="margin-top: 15px;">Scoreboard</button>

<!-- Oyun bitti ekranƒ±na Skorboard butonu ekleyin -->
<button id="show-final-scoreboard-button" style="margin-top: 10px;">Show the Scoreboard</button>


    <div id="game-over-container">
        <h2>Game Finished!</h2>
        <p>Congratulations, all levels completed!!</p>
        <p>Final Score: <span id="final-score">0</span></p>
        <p>Total Game Time: <span id="total-completion-time">0</span> seconds</p>
        <div class="selections-history">
            <h3>all choice history</h3>
            <ul id="final-history"></ul>
        </div>
        <button id="restart-button">Play again</button>
    </div>

     <% if (error) { %>
        <p id="error-message"><%= error %></p>
    <% } %>

    <script>
        // --- Veriyi EJS'den Alma ---
        const allWordsData = <%- JSON.stringify(sozcukler) %>;
        const originalWordList = Object.keys(allWordsData);

        // --- DOM Elementleri ---
        const mainTitle = document.getElementById('main-title');
        const usernameContainer = document.getElementById('username-container');
        const gameContainer = document.getElementById('game-container');
        const phaseTransitionContainer = document.getElementById('phase-transition-container');
        const gameOverContainer = document.getElementById('game-over-container');
        const timerContainer = document.getElementById('timer-container');
        const timerDisplay = document.getElementById('timer');

        const usernameInput = document.getElementById('username-input');
        const saveUsernameButton = document.getElementById('save-username-button');
        const usernameDisplay = document.getElementById('username-display');
        const scoreDisplay = document.getElementById('score');
        const sentenceDisplay = document.getElementById('sentence-display'); // A≈üama 2 i√ßin
        const speakButton = document.getElementById('speak-button');
        const choicesContainer = document.getElementById('choices-container');
        const nextButton = document.getElementById('next-button');
        const phaseScoreDisplay = document.getElementById('phase-score');
        const startPhase2Button = document.getElementById('start-phase2-button');
        const finalScoreDisplay = document.getElementById('final-score');
        const restartButton = document.getElementById('restart-button');
        const errorMessage = document.getElementById('error-message');
        const phase1CompletionTime = document.getElementById('phase1-completion-time');
        const totalCompletionTime = document.getElementById('total-completion-time');
        

        // --- Oyun Deƒüi≈ükenleri ---
        let currentPhase = 1;
        let currentScore = 0;
        let shuffledWordsPhase1 = [];
        let shuffledWordsPhase2 = [];
        let wordPointer = 0; // Mevcut listedeki sƒ±ra
        let currentWordData = null;
        let correctAnswer = '';
        let speechSupported = ('speechSynthesis' in window);
        let currentUsername = '';
        
        // Zamanlayƒ±cƒ± deƒüi≈ükenleri
        let timeRemaining = 60;
        let timerInterval = null;
        let gameStartTime = 0;
        let phase1EndTime = 0;
        let gameEndTime = 0;
        let phase1Duration = 0;
        let totalGameDuration = 0;
        
        // Se√ßim ge√ßmi≈üi i√ßin yeni eklenen deƒüi≈üken
        let selectionHistory = [];

        // --- √áerez (Cookie) Fonksiyonlarƒ± ---
        function setCookie(name, value, days) { /* ... (√∂ncekiyle aynƒ±, ama artƒ±k kullanƒ±lmƒ±yor) ... */ }
        function getCookie(name) { /* ... (√∂ncekiyle aynƒ±) ... */ }
        function deleteCookie(name) {
            document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; SameSite=Lax';
        }

        // --- Yardƒ±mcƒ± Fonksiyonlar ---
        function shuffleArray(array) {
            let newArray = [...array]; // Orijinal diziyi bozmamak i√ßin kopyala
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        }

        // --- Zamanlayƒ±cƒ± Fonksiyonlarƒ± ---
        function startTimer() {
            timerContainer.style.display = 'block';
            timerDisplay.textContent = timeRemaining;
            
            timerInterval = setInterval(() => {
                timeRemaining--;
                timerDisplay.textContent = timeRemaining;
                
                if (timeRemaining <= 0) {
                    clearInterval(timerInterval);
                    handleTimeUp();
                }
            }, 1000);
        }
        
        function stopTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
        }
        
        function resetTimer() {
            stopTimer();
            timeRemaining = 60;
            timerDisplay.textContent = timeRemaining;
        }
        
        // --- Rank G√∂nderme Fonksiyonu ---
        function sendRank() {
            const payload = {
                username: currentUsername,
                score: currentScore,
                totalTime: totalGameDuration
            };
            fetch('https://english.secaltubitak.site/hardRank', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (!response.ok) throw new Error('Sunucu hatasƒ±');
                return response.json();
            })
            .then(data => console.log('Rank kaydedildi:', data))
            .catch(err => console.error('Rank kaydedilirken hata:', err));
        }
        
        function handleTimeUp() {
            stopTimer();
            gameEndTime = Date.now();
            totalGameDuration = Math.floor((gameEndTime - gameStartTime) / 1000);
            
            // Rank sistemine puanƒ± g√∂nder
            sendRank();
            
            gameContainer.style.display = 'none';
            finalScoreDisplay.textContent = currentScore;
            totalCompletionTime.textContent = totalGameDuration;
            renderSelectionHistory('final-history'); // Se√ßim ge√ßmi≈üini g√∂ster
            gameOverContainer.style.display = 'block';
            mainTitle.textContent = "Oyun Bitti! - S√ºre Doldu";
            timerContainer.style.display = 'none';
        }

        // --- Konu≈üma Fonksiyonu ---
        function speakContent() {
            if (!speechSupported) {
                console.warn("Tarayƒ±cƒ±nƒ±z konu≈üma sentezini desteklemiyor.");
                return;
            }
            if (!correctAnswer) return; // Hen√ºz kelime se√ßilmediyse

            let textToSpeak = '';
            if (currentPhase === 1) {
                textToSpeak = correctAnswer; // A≈üama 1: Kelimeyi oku
            } else {
                // A≈üama 2: Tam c√ºmleyi oku
                textToSpeak = allWordsData[correctAnswer]?.cumle?.tam || correctAnswer; // C√ºmle yoksa kelimeyi oku
            }

            window.speechSynthesis.cancel();
            const utterance = new SpeechSynthesisUtterance(textToSpeak);
            utterance.lang = 'en-US';
            utterance.rate = 0.5; // Yava≈ü hƒ±z
            window.speechSynthesis.speak(utterance);
        }

        // --- Se√ßim Ge√ßmi≈üi G√∂r√ºnt√ºleme Fonksiyonu ---
        function renderSelectionHistory(containerId, phase = null) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            const filtered = phase ? 
                selectionHistory.filter(item => item.phase === phase) : 
                selectionHistory;
            
            container.innerHTML = filtered.map((item, index) => `
                <li class="${item.isCorrect ? 'correct' : 'incorrect'}">
                    ${index + 1}. Question - Word: "${item.word}" ‚Üí 
                    Chosen: "${item.selected}" 
                    (${item.isCorrect ? '‚úì' : '‚úó'})
                </li>
            `).join('');
        }

        // --- Oyun Mantƒ±ƒüƒ± ---
        function loadNextWord() {
            const currentList = currentPhase === 1 ? shuffledWordsPhase1 : shuffledWordsPhase2;

            // Mevcut a≈üamanƒ±n kelimeleri bitti mi?
            if (wordPointer >= currentList.length) {
                if (currentPhase === 1) {
                    // A≈üama 1 bitti, A≈üama 2'ye ge√ßi≈ü ekranƒ±nƒ± g√∂ster
                    stopTimer();
                    phase1EndTime = Date.now();
                    phase1Duration = Math.floor((phase1EndTime - gameStartTime) / 1000);
                    
                    gameContainer.style.display = 'none';
                    phaseScoreDisplay.textContent = currentScore;
                    phase1CompletionTime.textContent = phase1Duration;
                    renderSelectionHistory('phase1-history', 1); // A≈üama 1 ge√ßmi≈üini g√∂ster
                    phaseTransitionContainer.style.display = 'block';
                    mainTitle.textContent += " - level 1 completed";
                    timerContainer.style.display = 'none';
                } else {
                    // A≈üama 2 bitti, Oyun Sonu ekranƒ±nƒ± g√∂ster
                    stopTimer();
                    gameEndTime = Date.now();
                    totalGameDuration = Math.floor((gameEndTime - gameStartTime) / 1000);
                    
                    // Rank sistemine puanƒ± g√∂nder
                    sendRank();
                    
                    gameContainer.style.display = 'none';
                    finalScoreDisplay.textContent = currentScore;
                    totalCompletionTime.textContent = totalGameDuration;
                    renderSelectionHistory('final-history'); // T√ºm se√ßim ge√ßmi≈üini g√∂ster
                    gameOverContainer.style.display = 'block';
                    mainTitle.textContent = "game over!";
                    timerContainer.style.display = 'none';
                }
                return; // ƒ∞≈ülemi bitir, yeni kelime y√ºkleme
            }

            // Kelimeyi al ve quiz'i kur
            const nextWord = currentList[wordPointer];
            setupQuiz(nextWord);
            wordPointer++; // Sƒ±radaki kelimeye ge√ß
        }

        function setupQuiz(word) {
             if (!word || !allWordsData[word]) {
                  console.error(`Kelime verisi bulunamadƒ±: ${word}`);
                  choicesContainer.innerHTML = "<p>Bu kelime i√ßin veri bulunamadƒ±.</p>";
                  speakButton.disabled = true; nextButton.disabled = true; return;
             }

            correctAnswer = word;
            currentWordData = allWordsData[word];

            // A≈üama 2'ye √∂zel: Eksik c√ºmleyi g√∂ster
            if (currentPhase === 2) {
                const incompleteSentence = currentWordData.cumle?.eksik;
                if (incompleteSentence) {
                    sentenceDisplay.textContent = incompleteSentence;
                    sentenceDisplay.style.display = 'block';
                } else {
                    sentenceDisplay.style.display = 'none'; // C√ºmle yoksa gizle
                }
                speakButton.textContent = "üîä Listen to the sentence";
                speakButton.title = "listen full sentences";
            } else {
                sentenceDisplay.style.display = 'none'; // A≈üama 1'de c√ºmle alanƒ±nƒ± gizle
                speakButton.textContent = "üîä listen the word";
                speakButton.title = "listen the word";
            }

            // ≈ûƒ±klarƒ± olu≈ütur (A≈üama 1 ve 2 i√ßin aynƒ± mantƒ±k)
            let choices = [correctAnswer];
            let similarWords = currentWordData.benzerler ? shuffleArray([...currentWordData.benzerler]) : [];
             const correctIndexInSimilar = similarWords.indexOf(correctAnswer);
             if (correctIndexInSimilar > -1) { similarWords.splice(correctIndexInSimilar, 1); }

             const distractorsNeeded = 3;
             for(let i = 0; i < similarWords.length && choices.length < (distractorsNeeded + 1); i++) {
                 if(!choices.includes(similarWords[i])) { choices.push(similarWords[i]); }
             }
            // Distractors'i karƒ±≈ütƒ±r ve 3 ≈üƒ±ka d√∂n√º≈üt√ºr (doƒüru cevap ile toplam 4 ≈üƒ±k)
            choices = shuffleArray([correctAnswer, ...similarWords.slice(0, 3)]);

            // Butonlarƒ± olu≈ütur
            choicesContainer.innerHTML = '';
            choices.forEach(choice => {
                const button = document.createElement('button');
                button.classList.add('choice-button');
                button.textContent = choice;
                button.dataset.answer = choice;
                button.addEventListener('click', handleAnswerClick);
                choicesContainer.appendChild(button);
            });

            speakButton.disabled = false;
            nextButton.disabled = true; // Cevap verilince aktifle≈üecek
        }

        function handleAnswerClick(event) {
            const selectedButton = event.target;
            const selectedAnswer = selectedButton.dataset.answer;
            const allChoiceButtons = choicesContainer.querySelectorAll('.choice-button');
            allChoiceButtons.forEach(btn => btn.disabled = true);

            if (selectedAnswer === correctAnswer) {
                selectedButton.classList.add('correct');
                currentScore += 5;
                scoreDisplay.textContent = currentScore; // Skoru ekranda g√ºncelle
            } else {
                selectedButton.classList.add('incorrect');
                const correctButton = choicesContainer.querySelector(`.choice-button[data-answer="${correctAnswer}"]`);
                if (correctButton) { correctButton.classList.add('correct'); }
            }
            
            // Se√ßim ge√ßmi≈üine ekleme
            selectionHistory.push({
                phase: currentPhase,
                word: correctAnswer,
                selected: selectedAnswer,
                isCorrect: selectedAnswer === correctAnswer,
                timestamp: new Date().toLocaleTimeString()
            });
            
            nextButton.disabled = false; // ƒ∞lerle butonunu aktif et
        }

        function startPhase2() {
            currentPhase = 2;
            wordPointer = 0; // Sayacƒ± sƒ±fƒ±rla
            shuffledWordsPhase2 = shuffleArray(originalWordList); // A≈üama 2 i√ßin listeyi karƒ±≈ütƒ±r

            phaseTransitionContainer.style.display = 'none'; // Ge√ßi≈ü ekranƒ±nƒ± gizle
            gameContainer.style.display = 'block';          // Oyun ekranƒ±nƒ± g√∂ster
            mainTitle.textContent = "Let's Pronounce Correctly! Level 2"; // Ba≈ülƒ±ƒüƒ± g√ºncelle
            scoreDisplay.textContent = currentScore; // Skoru tekrar yaz (gerekliyse)
            usernameDisplay.textContent = currentUsername; // Kullanƒ±cƒ± adƒ±nƒ± tekrar yaz
            
            // A≈üama 1 se√ßim ge√ßmi≈üini render et
            renderSelectionHistory('phase1-history', 1);
            
            // A≈üama 2 i√ßin zamanlayƒ±cƒ±yƒ± yeniden ba≈ülat
            resetTimer();
            startTimer();
            timerContainer.style.display = 'block';

            loadNextWord(); // A≈üama 2'nin ilk kelimesini y√ºkle
        }

        function restartGame() {
            // Oyun yeniden ba≈ülatƒ±lmadan √∂nce son kez se√ßim ge√ßmi≈üini g√∂ster
            renderSelectionHistory('final-history');
            window.location.reload(); // Sayfayƒ± yeniden y√ºkleyerek oyunu sƒ±fƒ±rla
        }

        // --- Ba≈ülangƒ±√ß Ayarlarƒ± ---
        function initializeGame() {
            console.log("Oyun ba≈ülatƒ±lƒ±yor, √ßerezler siliniyor...");
            deleteCookie('username');
            deleteCookie('score');

            if (errorMessage) {
                 console.error("Sunucu Hatasƒ±:", errorMessage.textContent);
                 usernameContainer.style.display = 'none'; return;
             }
             if (originalWordList.length === 0 && !errorMessage) {
                 console.error("Ba≈ülatƒ±lacak kelime bulunamadƒ±.");
                 usernameContainer.innerHTML = "<p>Oyun ba≈ülatƒ±lamƒ±yor. Kelime verisi yok.</p>";
                 usernameContainer.style.display = 'block'; return;
             }

            // Her zaman kullanƒ±cƒ± adƒ± giri≈üi ile ba≈üla
            usernameContainer.style.display = 'block';
            gameContainer.style.display = 'none';
            phaseTransitionContainer.style.display = 'none';
            gameOverContainer.style.display = 'none';
            timerContainer.style.display = 'none';

            // --- Event Listener'lar ---
            saveUsernameButton.addEventListener('click', () => {
                currentUsername = usernameInput.value.trim(); // Kullanƒ±cƒ± adƒ±nƒ± deƒüi≈ükene ata
                if (currentUsername) {
                    usernameDisplay.textContent = currentUsername; // Ekranda g√∂ster
                    currentScore = 0; // Skoru sƒ±fƒ±rla
                    scoreDisplay.textContent = currentScore;
                    currentPhase = 1; // A≈üama 1'den ba≈üla
                    wordPointer = 0; // Sayacƒ± sƒ±fƒ±rla
                    shuffledWordsPhase1 = shuffleArray(originalWordList); // A≈üama 1 listesini karƒ±≈ütƒ±r
                    selectionHistory = []; // Se√ßim ge√ßmi≈üini temizle

                    usernameContainer.style.display = 'none'; // Giri≈ü ekranƒ±nƒ± gizle
                    gameContainer.style.display = 'block';     // Oyun ekranƒ±nƒ± g√∂ster
                    mainTitle.textContent = "Let's Pronounce Correctly! Level 1"; // Ba≈ülƒ±ƒüƒ± ayarla
                    
                    // Oyunu ba≈ülat ve zamanlayƒ±cƒ±yƒ± ba≈ülat
                    gameStartTime = Date.now();
                    startTimer();

                    loadNextWord(); // A≈üama 1'in ilk kelimesini y√ºkle
                } else {
                    alert('L√ºtfen ge√ßerli bir kullanƒ±cƒ± adƒ± girin.');
                }
            });

            speakButton.addEventListener('click', speakContent); // G√ºncellenmi≈ü konu≈üma fonksiyonunu √ßaƒüƒ±r
            nextButton.addEventListener('click', loadNextWord);
            startPhase2Button.addEventListener('click', startPhase2); // A≈üama 2'yi ba≈ülatan butona olay ekle
            restartButton.addEventListener('click', restartGame); // Yeniden ba≈ülatma butonuna olay ekle
        }

        // Sayfa y√ºklendiƒüinde oyunu ba≈ülat
        window.addEventListener('DOMContentLoaded', initializeGame);


        
        let scoreboardContainer;
    let scoreboardBody;
    let showScoreboardButton;
    let showFinalScoreboardButton;
    let closeScoreboardButton;
    
    // Skor verileri - oyun sonunda doldurulacak
    let rankData = null;
    
    // Skorboard'u y√ºkleme fonksiyonu
    function loadScoreboard() {
        // Eƒüer zaten rankData varsa, onu kullan
        if (rankData) {
            displayScoreboard(rankData);
            return;
        }
        
        // Veri yoksa y√ºkleniyor g√∂ster
        scoreboardBody.innerHTML = '<tr><td colspan="5"><div class="loader"></div><p>Skorlar y√ºkleniyor...</p></td></tr>';
        
        // Son rank g√∂nderiminin yanƒ±tƒ±nƒ± kullan ya da oyun sonunda kaydedilen veriyi kullan
        fetch('https://english.secaltubitak.site/hardRank', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                username: "score_query", // Sadece veri almak i√ßin ge√ßici istek
                score: 0,
                totalTime: 0
            })
        })
        .then(response => {
            if (!response.ok) throw new Error('Sunucu hatasƒ±');
            return response.json();
        })
        .then(data => {
            rankData = data.data || [];
            displayScoreboard(rankData);
        })
        .catch(err => {
            console.error('Skorboard y√ºklenirken hata:', err);
            scoreboardBody.innerHTML = '<tr><td colspan="5">Skorlar y√ºklenemedi. L√ºtfen daha sonra tekrar deneyin.</td></tr>';
        });
    }
    
    // Skorboard'u g√∂sterme fonksiyonu
    function displayScoreboard(scores) {
        if (!Array.isArray(scores) || scores.length === 0) {
            scoreboardBody.innerHTML = '<tr><td colspan="5">Hen√ºz hi√ß skor kaydedilmemi≈ü.</td></tr>';
            return;
        }
        
        // Skorlarƒ± sƒ±rala: √ñnce puana g√∂re azalan, sonra s√ºreye g√∂re artan
        const sortedScores = scores.sort((a, b) => {
            if (b.score !== a.score) {
                return b.score - a.score; // Y√ºksek puan √∂nce
            }
            return a.totalTime - b.totalTime; // Aynƒ± puanda d√º≈ü√ºk s√ºre √∂nce
        });
        
        // Tabloyu olu≈ütur
        scoreboardBody.innerHTML = '';
        sortedScores.forEach((score, index) => {
            const row = document.createElement('tr');
            
            // ƒ∞lk 3 sƒ±ra i√ßin √∂zel sƒ±nƒ±f ekle
            if (index === 0) row.classList.add('top-1');
            else if (index === 1) row.classList.add('top-2');
            else if (index === 2) row.classList.add('top-3');
            
            // Tarih formatla
            const scoreDate = new Date(score.createdAt);
            const formattedDate = `${scoreDate.toLocaleDateString()} ${scoreDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;
            
            row.innerHTML = `
                <td>${index + 1}</td>
                <td>${score.username}</td>
                <td>${score.score}</td>
                <td>${score.totalTime}</td>
                <td>${formattedDate}</td>
            `;
            scoreboardBody.appendChild(row);
        });
    }
    
    // Mevcut sendRank fonksiyonunu d√ºzenleme
    const originalSendRank = sendRank;
    sendRank = function() {
        const payload = {
            username: currentUsername,
            score: currentScore,
            totalTime: totalGameDuration
        };
        
        fetch('https://english.secaltubitak.site/hardRank', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        })
        .then(response => {
            if (!response.ok) throw new Error('Sunucu hatasƒ±');
            return response.json();
        })
        .then(data => {
            console.log('Rank kaydedildi:', data);
            // Rank verilerini sakla
            if (data && data.data) {
                rankData = data.data;
            }
        })
        .catch(err => console.error('Rank kaydedilirken hata:', err));
    };
    
    // Skorboard'u g√∂ster
    function showScoreboard() {
        // Diƒüer konteynerlarƒ± gizle
        usernameContainer.style.display = 'none';
        gameContainer.style.display = 'none';
        phaseTransitionContainer.style.display = 'none';
        gameOverContainer.style.display = 'none';
        timerContainer.style.display = 'none';
        
        // Skorboard'u g√∂ster
        scoreboardContainer.style.display = 'block';
        loadScoreboard();
    }
    
    // Skorboard'u kapat
    function closeScoreboard() {
        scoreboardContainer.style.display = 'none';
        
        // Oyun durumuna g√∂re uygun ekranƒ± tekrar g√∂ster
        if (gameEndTime > 0) {
            gameOverContainer.style.display = 'block';
        } else if (phase1EndTime > 0 && currentPhase === 1) {
            phaseTransitionContainer.style.display = 'block';
        } else if (currentUsername) {
            gameContainer.style.display = 'block';
            if (timerInterval) timerContainer.style.display = 'block';
        } else {
            usernameContainer.style.display = 'block';
        }
    }
    
    // DOM hazƒ±r olduƒüunda skorboard elemanlarƒ±nƒ± olu≈ütur ve baƒüla
    function initScoreboard() {
        // Eƒüer HTML'de zaten eklenmi≈üse elemanlarƒ± bul
        scoreboardContainer = document.getElementById('scoreboard-container');
        scoreboardBody = document.getElementById('scoreboard-body');
        showScoreboardButton = document.getElementById('show-scoreboard-button');
        showFinalScoreboardButton = document.getElementById('show-final-scoreboard-button');
        closeScoreboardButton = document.getElementById('close-scoreboard-button');
        
        // Ana men√ºye skorboard butonu ekle
        if (usernameContainer && !showScoreboardButton) {
            showScoreboardButton = document.createElement('button');
            showScoreboardButton.id = 'show-scoreboard-button';
            showScoreboardButton.textContent = 'Skorboard';
            showScoreboardButton.style.marginTop = '15px';
            usernameContainer.appendChild(showScoreboardButton);
        }
        
        // Oyun sonu ekranƒ±na skorboard butonu ekle
        if (gameOverContainer && !showFinalScoreboardButton) {
            showFinalScoreboardButton = document.createElement('button');
            showFinalScoreboardButton.id = 'show-final-scoreboard-button';
            showFinalScoreboardButton.textContent = 'Skorboard\'u G√∂r√ºnt√ºle';
            showFinalScoreboardButton.style.marginTop = '10px';
            const restartButton = document.getElementById('restart-button');
            restartButton.parentNode.insertBefore(showFinalScoreboardButton, restartButton);
        }
        
        // Olay dinleyicileri baƒüla
        if (showScoreboardButton) showScoreboardButton.addEventListener('click', showScoreboard);
        if (showFinalScoreboardButton) showFinalScoreboardButton.addEventListener('click', showScoreboard);
        if (closeScoreboardButton) closeScoreboardButton.addEventListener('click', closeScoreboard);
    }
    
    // Orijinal ba≈ülatma fonksiyonunu geni≈ület
    const originalInitializeGame = window.initializeGame || function(){};
    window.initializeGame = function() {
        originalInitializeGame();
        initScoreboard();
    };
    
    // Sayfa y√ºklendiƒüinde skorboard hazƒ±rlƒ±klarƒ±nƒ± yap
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initScoreboard);
    } else {
        initScoreboard();
    }
    </script>

</body>
</html>
